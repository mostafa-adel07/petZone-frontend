{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport styled from \"styled-components/native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Feather } from \"@expo/vector-icons\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Verificationpasswordcode = function Verificationpasswordcode(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState({\n    isValidCode: true\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var handleValidus = function handleValidus(val) {\n    var reg = /@./;\n\n    if (val.trim().length >= 4 && reg.test(val) !== false) {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        isValidCode: true\n      }));\n    } else {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        isValidCode: false\n      }));\n    }\n  };\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      emailError = _useState2[0],\n      SetEamilError = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      codeverfication = _useState4[0],\n      SetCode = _useState4[1];\n\n  function Login1() {\n    return _regeneratorRuntime.async(function Login1$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.post(\"https://petzone99.herokuap
p.com/api/v1/users/VerifyToken/\" + codeverfication, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"My-Custom-Header\": \"foobar\",\n                Authorization: \"Bearer \" + codeverfication\n              }\n            }).then(function (response) {\n              navigation.navigate(\"Setnewpassword\", {\n                codeverfication: codeverfication\n              });\n            }).catch(function (error) {\n              if (error.response.status === 400) {\n                alert(\"Token is invalid or has expired ,please go send email again\");\n                navigation.navigate(\"Forgetpassword\");\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function Emilvalidator() {\n    (function (emailError) {\n      return SetEamilError(\"emil feild can not be empty\");\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.input,\n      children: _jsx(TextInput, {\n        style: styles.inputtext,\n        placeholder: \"Enter code\",\n        placeholderTextColor: \"gray\",\n        value: codeverfication,\n        onEndEditing: function onEndEditing(e) {\n          return handleValidus(e.nativeEvent.text);\n        },\n        onBlur: Emilvalidator,\n        onChangeText: function onChangeText(codeverfication) {\n          return SetCode(codeverfication);\n        }\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.buttoncontainer,\n      onPress: Login1,\n      children: _jsx(Text, {\n        style: styles.buttontext,\n        children: \"Verify\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgb(245, 245, 245)\"\n  },\n  input: {\n    flexDirection: \"row\",\n    width: 300\n  },\n  inputtext: {\n    borderRadius: 9,\n    width: 300,\n    height: 40,\n    borderColor: \"rgb(48, 71, 94)\",\n    borderWidth: 1,\n    paddingHorizontal: 35,\n    fontSize: 15,\n    color: \"black\",\n    marginVertical: 10\n  },\n  icon1: {\n    position: \"absolute\",\n    top: 18,\n    left: 5\n  },\n  buttoncontainer: {\n    borderRadius: 15,\n    width: 150,\n    height: 40,\n    backgroundColor: \"rgb(255, 89, 89)\",\n    paddingTop: 1,\n    justifyContent: \"center\",\n    marginTop: 15,\n    paddingLeft: 60\n  },\n  buttontext: {\n    textAlign: \"center\",\n    color: \"black\",\n    fontSize: 15,\n    right: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/101/Desktop/New folder/petZone/components/screens/verificationpasswordcode.js"],"names":["React","useState","styled","Ionicons","MaterialIcons","MaterialCommunityIcons","Feather","axios","Verificationpasswordcode","navigation","isValidCode","data","setData","handleValidus","val","reg","trim","length","test","emailError","SetEamilError","codeverfication","SetCode","Login1","post","headers","Authorization","then","response","navigate","catch","error","status","alert","Emilvalidator","styles","container","input","inputtext","e","nativeEvent","text","buttoncontainer","buttontext","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","flexDirection","width","borderRadius","height","borderColor","borderWidth","paddingHorizontal","fontSize","color","marginVertical","icon1","position","top","left","paddingTop","marginTop","paddingLeft","textAlign","right"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  TouchableOpacity,\r\n  Button,\r\n} from \"react-native\";\r\nimport { TextInput } from \"react-native\";\r\nimport styled from \"styled-components/native\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { Feather } from \"@expo/vector-icons\";\r\nimport axios from \"axios\";\r\n\r\nexport const Verificationpasswordcode = ({ navigation }) => {\r\n  const [data, setData] = React.useState({\r\n    isValidCode: true,\r\n  });\r\n  const handleValidus = (val) => {\r\n    let reg = /@./;\r\n    if (val.trim().length >= 4 && reg.test(val) !== false) {\r\n      setData({\r\n        ...data,\r\n        isValidCode: true,\r\n      });\r\n    } else {\r\n      setData({\r\n        ...data,\r\n        isValidCode: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const [emailError, SetEamilError] = useState(true);\r\n  //const passwordError=useState('');\r\n\r\n  const [codeverfication, SetCode] = useState(\"\");\r\n\r\n  async function Login1() {\r\n\r\n      await axios\r\n        .post(\r\n          `https://petzone99.herokuap
p.com/api/v1/users/VerifyToken/${codeverfication}`,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"My-Custom-Header\": \"foobar\",\r\n              Authorization: `Bearer ${codeverfication}`,\r\n            },\r\n          }\r\n        )\r\n        .then(function (response) {\r\n          navigation.navigate(\"Setnewpassword\", {\r\n            codeverfication: codeverfication,\r\n          })\r\n        })\r\n        .catch(function (error) {\r\n          if(error.response.status === 400){\r\n            alert(\"Token is invalid or has expired ,please go send email again\")\r\n            navigation.navigate(\"Forgetpassword\");\r\n          }\r\n        });\r\n    \r\n  }\r\n  function Emilvalidator() {\r\n    /*if(email==\"\")\r\n{*/\r\n    (emailError) => SetEamilError(\"emil feild can not be empty\");\r\n    //}\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* {<Text style={styles.title}>Login</Text>} */}\r\n\r\n      <View style={styles.input}>\r\n        <TextInput\r\n          style={styles.inputtext}\r\n          placeholder=\"Enter code\"\r\n          placeholderTextColor=\"gray\"\r\n          value={codeverfication}\r\n          onEndEditing={(e) => handleValidus(e.nativeEvent.text)}\r\n          onBlur={Emilvalidator}\r\n          onChangeText={(codeverfication) => SetCode(codeverfication)}\r\n        />\r\n\r\n      </View>\r\n\r\n      <TouchableOpacity\r\n        style={styles.buttoncontainer}\r\n        onPress={Login1}\r\n      >\r\n        <Text style={styles.buttontext}>Verify</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"rgb(245, 245, 245)\",\r\n  },\r\n  input: {\r\n    flexDirection: \"row\",\r\n    width: 300,\r\n  },\r\n\r\n  inputtext: {\r\n    borderRadius: 9,\r\n    width: 300,\r\n    height: 40,\r\n    borderColor: \"rgb(48, 71, 94)\",\r\n    borderWidth: 1,\r\n    paddingHorizontal: 35,\r\n    fontSize: 15,\r\n    color: \"black\",\r\n    marginVertical: 10,\r\n  },\r\n  icon1: {\r\n    position: \"absolute\",\r\n    top: 18,\r\n    left: 5,\r\n  },\r\n\r\n  buttoncontainer: {\r\n    borderRadius: 15,\r\n    width: 150,\r\n    height: 40,\r\n    backgroundColor: \"rgb(255, 89, 89)\",\r\n    paddingTop: 1,\r\n    justifyContent: \"center\",\r\n    marginTop: 15,\r\n    paddingLeft: 60,\r\n  },\r\n  buttontext: {\r\n    textAlign: \"center\",\r\n    color: \"black\",\r\n    fontSize: 15,\r\n    right: 30,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}